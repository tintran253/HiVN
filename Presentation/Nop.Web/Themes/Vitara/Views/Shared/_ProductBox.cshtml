@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@inject CatalogSettings catalogSettings
@inject IWorkContext workContext
@{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });
}

<div class="item" data-productid="@Model.Id">
    <div class="item-inner">
        <div class="item-img">
            <div class="item-img-info">
                <a class="product-image" title="@Model.DefaultPictureModel.Title" href="@Url.RouteUrl("Product", new { SeName = Model.SeName })"> <img alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title"> </a>
                <div class="new-label new-top-right">new</div>
                <div class="box-hover">
                    <ul class="add-to-links">
                        @*<li><a class="link-quickview" href="quick_view.html">Quick View</a> </li>*@

                        @if (!Model.ProductPrice.DisableWishlistButton)
                        {
                            <li><a title="@T("ShoppingCart.AddToWishlist")" class="link-wishlist" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;">@T("ShoppingCart.AddToWishlist")</a> </li>
                        }
                        @if (!Model.ProductPrice.DisableAddToCompareListButton)
                        {
                            <li><a title="@T("ShoppingCart.AddToCompareList")" class="link-compare" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;">@T("ShoppingCart.AddToCompareList")</a> </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="item-info">
            <div class="info-inner">
                @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
                {
                    <div class="sku">
                        @Model.Sku
                    </div>
                }
                @*@Html.Raw(Model.ShortDescription)*@
                <div class="item-title"> <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})"> @Model.Name </a> </div>
                @if (Model.ReviewOverviewModel.AllowCustomerReviews)
                {
                    var ratingPercent = 0;
                    if (Model.ReviewOverviewModel.TotalReviews != 0)
                    {
                        ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
                    }
                    <div class="rating">
                        <div class="ratings">
                            <div class="rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                                <div style="width:@(ratingPercent)%" class="rating"></div>
                            </div>
                            @*<span class="separator">|</span> <a href="#">Add Review</a>*@
                            <p class="rating-links"><a href="#">@Model.ReviewOverviewModel.TotalReviews Review(s)</a> </p>
                        </div>
                    </div>
                }
                <div class="item-content">
                    @await Component.InvokeAsync("Widget", new { widgetZone = "productbox_addinfo_before", additionalData = Model.Id })


                    @if (Model.ProductPrice.DisplayTaxShippingInfo)
                    {
                        var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                        //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                        //of course, you can modify appropriate locales to include VAT info there
                        <span class="tax-shipping-info">
                            @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                        </span>
                    }
                    @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                    {
                        <div class="base-price-pangv">
                            @Model.ProductPrice.BasePricePAngV
                        </div>
                    }
                    <div class="item-price">
                        <div class="price-box"> <span class="regular-price">@(!string.IsNullOrEmpty(Model.ProductPrice.OldPrice) ? @Model.ProductPrice.OldPrice : "") <span class="price">@Model.ProductPrice.Price</span> </span> </div>
                    </div>
                    @await Component.InvokeAsync("Widget", new { widgetZone = "productbox_addinfo_middle", additionalData = Model.Id })

                    <div class="action">
                        @if (!Model.ProductPrice.DisableBuyButton)
                        {
                            var addToCartText = T("ShoppingCart.AddToCart").Text;
                            if (Model.ProductPrice.IsRental)
                            {
                                addToCartText = T("ShoppingCart.Rent").Text;
                            }
                            if (Model.ProductPrice.AvailableForPreOrder)
                            {
                                addToCartText = T("ShoppingCart.PreOrder").Text;
                            }
                            <button class="button btn-cart" type="button" title="" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" data-original-title="@(addToCartText)"><span>@(addToCartText)</span> </button>
                        }
                    </div>
                    @await Component.InvokeAsync("Widget", new { widgetZone = "productbox_addinfo_after", additionalData = Model.Id })
                </div>
            </div>
        </div>
    </div>
</div>