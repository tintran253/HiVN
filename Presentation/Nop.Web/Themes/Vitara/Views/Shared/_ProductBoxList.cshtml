@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@inject CatalogSettings catalogSettings
@inject IWorkContext workContext
@{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });
}

<li class="item first" data-productid="@Model.Id">
    <div class="product-image">
        <a title="@Model.DefaultPictureModel.Title" href="@Url.RouteUrl("Product", new { SeName = Model.SeName })"> <img class="small-image" alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title"> </a>
        <div class="new-label new-top-left">New</div>
    </div>
    <div class="product-shop">
        <h2 class="product-name"><a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})"> @Model.Name </a> </h2>
        @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
        {
            <div class="sku">
                @Model.Sku
            </div>
        }
        @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
        {
            <div class="base-price-pangv">
                @Model.ProductPrice.BasePricePAngV
            </div>
        }
        @if (Model.ReviewOverviewModel.AllowCustomerReviews)
        {
            var ratingPercent = 0;
            if (Model.ReviewOverviewModel.TotalReviews != 0)
            {
                ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
            }
            <div class="rating">
                <div class="rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                    <div style="width:@(ratingPercent)%" class="rating"></div>
                </div>
                @*<span class="separator">|</span> <a href="#">Add Review</a>*@
                <p class="rating-links"><a href="#">@Model.ReviewOverviewModel.TotalReviews Review(s)</a> </p>
            </div>
        }

        <div class="desc std">
            <p>
                @Html.Raw(Model.ShortDescription)
                <a class="link-learn" title="" href="@Url.RouteUrl("Product", new {SeName = Model.SeName})">...</a>
            </p>
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = "productbox_addinfo_before", additionalData = Model.Id })
        @await Component.InvokeAsync("Widget", new { widgetZone = "productbox_addinfo_middle", additionalData = Model.Id })

        @if (Model.ProductPrice.DisplayTaxShippingInfo)
        {
            var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
            //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
            //of course, you can modify appropriate locales to include VAT info there
            <span class="tax-shipping-info">
                @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
            </span>
        }
        <div class="price-box">
            <p class="old-price"> <span class="price-label"></span> <span class="price"> @Model.ProductPrice.OldPrice </span> </p>
            <p class="special-price"> <span class="price-label"></span> <span class="price"> @Model.ProductPrice.Price </span> </p>
        </div>
        <div class="actions">
            @if (!Model.ProductPrice.DisableBuyButton)
            {
                var addToCartText = T("ShoppingCart.AddToCart").Text;
                if (Model.ProductPrice.IsRental)
                {
                    addToCartText = T("ShoppingCart.Rent").Text;
                }
                if (Model.ProductPrice.AvailableForPreOrder)
                {
                    addToCartText = T("ShoppingCart.PreOrder").Text;
                }
                <button class="button btn-cart ajx-cart" type="button" title="" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" data-original-title="@(addToCartText)"><span>@(addToCartText)</span> </button>
            }
            <span class="add-to-links">
                @if (!Model.ProductPrice.DisableWishlistButton)
                {
                    <a title="@T("ShoppingCart.AddToWishlist")" class="button link-wishlist" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;"><span>@T("ShoppingCart.AddToWishlist")</span> </a>
                }
                @if (!Model.ProductPrice.DisableAddToCompareListButton)
                {
                    <a title="@T("ShoppingCart.AddToCompareList")" class="button link-compare" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;"><span>@T("ShoppingCart.AddToCompareList")</span></a>
                }
            </span>
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = "productbox_addinfo_after", additionalData = Model.Id })
    </div>
</li>